// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTokenDB = `-- name: CreateTokenDB :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id,expires_at,revoked_at)
VALUES (
   $1,
   NOW(),
   NOW(),
   $2,
   $3,
   NULL
   )
   RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type CreateTokenDBParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateTokenDB(ctx context.Context, arg CreateTokenDBParams) error {
	_, err := q.db.ExecContext(ctx, createTokenDB, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.created_at, users.updated_at, users.email, users.hashed_password FROM users
JOIN refresh_tokens ON users.id = refresh_tokens.user_id
WHERE refresh_tokens.token = $1
   AND refresh_tokens.expires_at > NOW()
   AND refresh_tokens.revoked_at IS NULL
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}
